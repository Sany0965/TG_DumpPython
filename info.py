from telethon.tl.types import User, Channel, Chat
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.functions.account import GetAuthorizationsRequest
import os
from datetime import datetime
import asyncio
import time
import re

async def get_full_account_info(client, output_dir="dialogs"):
    info = []
    
    user = await fetch_user_info(client)
    info.append("\n=== –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ===")
    info.append(f"ID: {user['id']}")
    info.append(f"Username: @{user['username']}")
    info.append(f"–¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}")
    info.append(f"–ë–∏–æ: {user['bio']}")
    info.append(f"–ü—Ä–µ–º–∏—É–º: {'–î–∞' if user['is_premium'] else '–ù–µ—Ç'}")

    info.append("\n=== –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ===")
    if user['devices']:
        info.append(f"{'–ú–æ–¥–µ–ª—å':<20} | {'–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞':<12} | {'–í–µ—Ä—Å–∏—è':<10} | {'IP':<15}")
        info.append("-"*65)
        for dev in user['devices']:
            info.append(f"{dev['device_model']:<20} | {dev['platform']:<12} | {dev['app_version']:<10} | {dev['ip']:<15}")
    else:
        info.append("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö")

    info.append("\n=== –ö—Ä–∏–ø—Ç–æ-–∫–æ—à–µ–ª—å–∫–∏ ===")
    bots = [
        ("CryptoTestnetBot", "/wallet"),
        ("CryptoBot", "/wallet"),
        ("xrocket", "/wallet")
    ]
    
    for bot_username, command in bots:
        bot_data = await fetch_bot_data(client, bot_username, command)
        info.append(f"\nüîπ @{bot_username}:")
        info.append(bot_data.replace("‚âà", "‚âà"))

    info.append("\n=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ ===")
    stats = {
        '–ö–∞–Ω–∞–ª—ã': 0,
        '–ß–∞—Ç—ã': 0,
        '–ì—Ä—É–ø–ø—ã': 0,
        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏': 0,
        '–ë–æ—Ç—ã': 0,
        '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ': 1,
        '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ': 0
    }

    contacts = []
    async for dialog in client.iter_dialogs():
        if dialog.name == '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ':
            stats['–ò–∑–±—Ä–∞–Ω–Ω–æ–µ'] += 1
        elif dialog.is_channel:
            stats['–ö–∞–Ω–∞–ª—ã'] += 1
        elif dialog.is_group:
            stats['–ì—Ä—É–ø–ø—ã'] += 1
        elif isinstance(dialog.entity, Chat):
            stats['–ß–∞—Ç—ã'] += 1
        elif isinstance(dialog.entity, User):
            if dialog.entity.bot:
                stats['–ë–æ—Ç—ã'] += 1
            else:
                stats['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'] += 1
                if dialog.entity.contact:
                    contacts.append(dialog.entity)
        else:
            stats['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'] += 1

    info.append(f"{'–¢–∏–ø':<12} | {'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ':<10}")
    info.append("-"*23)
    for k, v in stats.items():
        info.append(f"{k:<12} | {v:<10}")

    info.append("\n=== –í–∑–∞–∏–º–Ω—ã–µ –ö–æ–Ω—Ç–∞–∫—Ç—ã ===")
    if contacts:
        info.append(f"{'–ò–º—è':<25} | {'Username':<15} | {'–¢–µ–ª–µ—Ñ–æ–Ω':<12}")
        info.append("-"*60)
        for contact in contacts:
            phone = getattr(contact, 'phone', '—Å–∫—Ä—ã—Ç')
            info.append(f"{get_entity_name(contact):<25} | @{contact.username or '-':<15} | {phone:<12}")
    else:
        info.append("–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    info.append("\n\nPowered by @worpli")
    
    os.makedirs(output_dir, exist_ok=True)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = os.path.join(output_dir, f"account_info_{timestamp}.txt")
    
    with open(filename, 'w', encoding='utf-8') as f:
        f.write("\n".join(info))
    
    print("\n".join(info))
    print(f"\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {filename}")
    
    return filename

async def fetch_bot_data(client, bot_username, command):
    try:
        bot = await client.get_entity(bot_username)
        await client.send_message(bot, command)
        
        start_time = time.time()
        response = ""
        
        while time.time() - start_time < 5:
            async for message in client.iter_messages(bot, limit=2):
                if message.out: 
                    continue
                if message.date.timestamp() > start_time:
                    response = await _filter_crypto_data(message.text)
                    return response
            await asyncio.sleep(1)
            
        return response
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}"

async def _filter_crypto_data(text):
    import re
    positive_wallets = []
    total_line = ""
    header = "üëõ –ö–æ—à–µ–ª—ë–∫"
    
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–ª–∞ –∏ –≤–∞–ª—é—Ç—ã
    amount_pattern = re.compile(r'([0-9]{1,3}(?:[ ,.\d]{3})*(?:\.\d+)?)\s*([A-Za-z]{3,})')
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è markdown-—Å—Å—ã–ª–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä: "[**Tether**](https://tether.to/)" -> "Tether"
    md_link_pattern = re.compile(r'ÓÄÅ?\*?(\*?)([^ÓÄÅ\*]+)\*?ÓÄÅ?ÓÄÅ[^)]+ÓÄÅ')
    
    for line in text.split('\n'):
        original_line = line.strip()
        if not original_line:
            continue
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –±–æ—Ç–æ–º
        if original_line.startswith("üîπ"):
            continue
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        if original_line.startswith('‚âà'):
            total_line = original_line
            continue
        
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–æ–µ—Ç–æ—á–∏–µ, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ—à–µ–ª—å–∫–µ
        if ':' in original_line:
            parts = original_line.split(':', 1)
            wallet_name_raw = parts[0].strip()
            # –£–±–∏—Ä–∞–µ–º markdown-—Ä–∞–∑–º–µ—Ç–∫—É –∏–∑ –∏–º–µ–Ω–∏ –∫–æ—à–µ–ª—å–∫–∞
            wallet_name = md_link_pattern.sub(r'\2', wallet_name_raw)
            wallet_name = wallet_name.replace('*', '').strip()
            wallet_rest = parts[1].strip()
            
            m = amount_pattern.search(wallet_rest)
            if m:
                try:
                    amount = float(m.group(1).replace(',', '').replace(' ', ''))
                    # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –±–æ–ª—å—à–µ –Ω—É–ª—è ‚Äì –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
                    if amount > 0:
                        positive_wallets.append(f"{wallet_name}: {wallet_rest}")
                except ValueError:
                    continue

    if positive_wallets:
        result = [header, ""]
        result.extend(positive_wallets)
        if total_line:
            result.extend(["", total_line])
        return "\n".join(result)
    else:
        return "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤"


async def fetch_user_info(client):
    me = await client.get_me()
    try:
        result = await client(GetAuthorizationsRequest())
        auths = result.authorizations
    except Exception:
        auths = []
    
    devices = []
    for auth in auths:
        devices.append({
            'device_model': auth.device_model,
            'platform': auth.platform,
            'app_version': auth.app_version,
            'ip': auth.ip
        })
    
    full = await client(GetFullUserRequest(me))
    bio = getattr(full, 'about', None) or ''
    
    user_info = {
        'id': me.id,
        'username': me.username or '',
        'phone': me.phone or '',
        'bio': bio,
        'is_premium': getattr(me, 'is_premium', False),
        'devices': devices
    }
    
    return user_info

def get_entity_name(entity):
    if isinstance(entity, User):
        return f"{entity.first_name} {entity.last_name or ''}".strip()
    return getattr(entity, 'title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')